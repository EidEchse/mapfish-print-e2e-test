apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    maven {url "http://repo.opengeo.org/"}
    maven {url "http://maven.restlet.org"}
}

configurations {
    geoserver
}

dependencies {
    geoserver ('org.geoserver.web:web-app:2.4.3') {
        transitive = false;
    }
    testCompile (rootProject, "junit:junit:${project.junitVersion}", 'org.mockito:mockito-core:1.9.5', "com.google.guava:guava:15.0")
}

def geoserverDir = "$buildDir/geoserver"
def geoserverDataDir = geoserverDir+"/data"
task extractGeoserver (type: Copy) {
    description "Extract the Geoserver web app jar and files in src/main/webapp into a directory to use for the jettyRun task"
    from zipTree(configurations.geoserver.singleFile)
    from fileTree("src/main/webapp") {include '**'}
    into geoserverDir
}

extractGeoserver.doLast {
    def offLoggingConfig = new File(geoserverDataDir, "logs/OFF_LOGGING.properties")
    logger.info("Writing an updated Geoserver log configuration to suppress geoserver output")
    new File(geoserverDataDir, "logging.xml").setText("""<logging>
  <level>OFF_LOGGING.properties</level>
  <location>${geoserverDir}/geoserver.log</location>
  <stdOutLogging>false</stdOutLogging>
</logging>""", "UTF-8")

    offLoggingConfig.parentFile.mkdirs()
    offLoggingConfig.setText("""log4j.debug=FALSE
log4j.rootLogger=OFF""", "UTF-8")
}

jettyRun {
    dependsOn extractGeoserver
    description 'Start the Geoserver Test Server'
    httpPort = 9876
    daemon = Boolean.parseBoolean(System.getProperty("jettyDaemon", "true"))
    contextPath = 'e2egeoserver'
    webAppSourceDirectory = file(geoserverDir)
    stopKey = "e2e-tests-geoserver"
    stopPort = 9877
    reload = 'manual'
}

String interactiveExpression = '**/*InteractiveTest.class'
test {
    dependsOn ':compileJava', 'testClasses', 'jettyRun'
    description 'Runs all automated e2e (integration) tests.'
    maxParallelForks = Runtime.getRuntime().availableProcessors();
    exclude interactiveExpression
}

task interactiveTest (dependsOn: test, type: Test) {
    description 'Runs all automated e2e (integration) tests as well as the tests that require user input for tests verification.'
    maxParallelForks = Runtime.getRuntime().availableProcessors();
    include interactiveExpression
}

//uploadArchives {
//    // do nothing because this project doesn't upload anything
//}
